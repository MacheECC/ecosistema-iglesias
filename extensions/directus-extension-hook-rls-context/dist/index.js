var a=({action:a},{database:t})=>{console.log("RLS PILOTO: hook cargado correctamente"),a("*",async(a,{accountability:s,collection:e})=>{if(!s?.user)return;if("iglesias"!==e)return;const r=s.user,o=!0===s.admin?"true":"false";let i="";try{const a=await t.raw("\n\t\t\t\tSELECT array_to_string(array_agg(iglesia_id::text), ',') AS csv\n\t\t\t\tFROM public.usuarios_iglesias\n\t\t\t\tWHERE user_id = ?\n\t\t\t\t",[r]);i=(a?.rows&&a.rows[0]||a?.[0]||{csv:""}).csv||""}catch(a){console.warn("[RLS PILOTO] Error obteniendo allowed_iglesias:",a?.message||a),i=""}try{await t.raw("SET app.user_id = ?",[r]),await t.raw("SET app.is_super_admin = ?",[o]),await t.raw("SET app.allowed_iglesias = ?",[i]),console.log(`[RLS PILOTO] Contexto establecido para usuario ${r}`)}catch(a){console.warn("[RLS PILOTO] SET context falló:",a?.message||a)}return async()=>{try{await t.raw("RESET app.user_id"),await t.raw("RESET app.is_super_admin"),await t.raw("RESET app.allowed_iglesias"),console.log(`[RLS PILOTO] Contexto limpiado para usuario ${r}`)}catch(a){console.warn("[RLS PILOTO] RESET falló:",a?.message||a)}}})};export{a as default};
