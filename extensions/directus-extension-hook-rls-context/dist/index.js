var a=({filter:a,action:s},{database:e,logger:r})=>{a("authenticate",async(a,s,{accountability:e,database:i})=>{const t=e?.user||"",n=!!e?.admin;let l="";if(t)try{const a=await i.raw("\n          SELECT array_to_string(array_agg(iglesia_id::text), ',') AS csv\n          FROM public.usuarios_iglesias\n          WHERE user_id = ?\n          ",[t]),s=a?.rows&&a.rows[0]||a?.[0]||{};l=s?.csv||""}catch(a){r?.warn?.(`[rls] lookup failed: ${a?.message||a}`)}try{await i.raw("SELECT set_config('app.user_id', ?, false)",[t]),await i.raw("SELECT set_config('app.is_super_admin', ?, false)",[n?"true":"false"]),await i.raw("SELECT set_config('app.allowed_iglesias', ?, false)",[l])}catch(a){r?.warn?.(`[rls] set_config failed: ${a?.message||a}`)}const _=await i.raw("\n      SELECT\n        current_setting('app.user_id', true)          AS user_id,\n        current_setting('app.is_super_admin', true)   AS is_super_admin,\n        current_setting('app.allowed_iglesias', true) AS allowed_iglesias\n      ");return r?.info?.({msg:"[rls] context after set_config",check:_?.rows?.[0],req_user:t}),a}),s("response",async(a,{database:s})=>{try{await s.raw("RESET app.user_id"),await s.raw("RESET app.is_super_admin"),await s.raw("RESET app.allowed_iglesias")}catch(a){r?.warn?.(`[rls] RESET failed: ${a?.message||a}`)}})};export{a as default};
