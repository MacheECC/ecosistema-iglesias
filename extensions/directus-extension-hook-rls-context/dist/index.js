var a=({filter:a,action:s},{logger:e})=>{e?.info?.("[rls] hook loaded");const i="00000000-0000-0000-0000-000000000000";async function t({accountability:a,database:s},t){const r=a?.user||"",n=!!a?.admin;let c="";if(r)try{const a=await s.raw("\n          SELECT array_to_string(array_agg(iglesia_id::text), ',') AS csv\n          FROM public.usuarios_iglesias\n          WHERE user_id = ?\n          ",[r]),e=a?.rows&&a.rows[0]||a?.[0]||{};c=e?.csv||""}catch(a){e?.warn?.(`[rls] lookup failed: ${a?.message||a}`)}const l=r||i,o=c||i;try{await s.raw("SELECT set_config('app.user_id', ?, false)",[l]),await s.raw("SELECT set_config('app.is_super_admin', ?, false)",[n?"true":"false"]),await s.raw("SELECT set_config('app.allowed_iglesias', ?, false)",[o])}catch(a){e?.warn?.(`[rls] set_config failed: ${a?.message||a}`)}try{const a=await s.raw("\n        SELECT\n          current_setting('app.user_id', true)          AS user_id,\n          current_setting('app.is_super_admin', true)   AS is_super_admin,\n          current_setting('app.allowed_iglesias', true) AS allowed_iglesias\n        ");e?.info?.({msg:"[rls] context after set_config",check:a?.rows?.[0],req_user:r||"(public/none)",collection:t})}catch(a){e?.warn?.(`[rls] verify failed: ${a?.message||a}`)}}a("items.query",async(a,s,e)=>(await t(e,s.collection),a)),a("items.read",async(a,s,e)=>(await t(e,s.collection),a)),s("response",async(a,s)=>{const{database:i}=s;try{await i.raw("RESET app.user_id"),await i.raw("RESET app.is_super_admin"),await i.raw("RESET app.allowed_iglesias")}catch(a){e?.warn?.(`[rls] RESET failed: ${a?.message||a}`)}})};export{a as default};
