var a=({filter:a,action:e},{logger:s})=>{a("items.read",async(a,e,i)=>{const{accountability:r,database:t}=i,n=r?.user||"",l=!!r?.admin;let c="";if(n)try{const a=await t.raw("\n          SELECT array_to_string(array_agg(iglesia_id::text), ',') AS csv\n          FROM public.usuarios_iglesias\n          WHERE user_id = ?\n          ",[n]),e=a?.rows&&a.rows[0]||a?.[0]||{};c=e?.csv||""}catch(a){s?.warn?.(`[rls] lookup failed: ${a?.message||a}`)}try{await t.raw("SELECT set_config('app.user_id', ?, false)",[n||""]),await t.raw("SELECT set_config('app.is_super_admin', ?, false)",[l?"true":"false"]),await t.raw("SELECT set_config('app.allowed_iglesias', ?, false)",[c||""])}catch(a){s?.warn?.(`[rls] set_config failed: ${a?.message||a}`)}const _=await t.raw("\n      SELECT\n        current_setting('app.user_id', true)          AS user_id,\n        current_setting('app.is_super_admin', true)   AS is_super_admin,\n        current_setting('app.allowed_iglesias', true) AS allowed_iglesias\n      ");return s?.info?.({msg:"[rls] context after set_config",check:_?.rows?.[0],req_user:n,collection:e.collection}),a}),e("response",async(a,{database:e})=>{try{await e.raw("RESET app.user_id"),await e.raw("RESET app.is_super_admin"),await e.raw("RESET app.allowed_iglesias")}catch(a){s?.warn?.(`[rls] RESET failed: ${a?.message||a}`)}})};export{a as default};
